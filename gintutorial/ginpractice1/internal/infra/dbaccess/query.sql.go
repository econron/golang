// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package dbaccess

import (
	"context"
	"database/sql"
	"time"
)

const addFavoriteShop = `-- name: AddFavoriteShop :exec
INSERT INTO favorite_shops (user_id, shop_id)
VALUES (?, ?)
`

type AddFavoriteShopParams struct {
	UserID int64
	ShopID int64
}

func (q *Queries) AddFavoriteShop(ctx context.Context, arg AddFavoriteShopParams) error {
	_, err := q.db.ExecContext(ctx, addFavoriteShop, arg.UserID, arg.ShopID)
	return err
}

const createAdvertisementContent = `-- name: CreateAdvertisementContent :exec
INSERT INTO advertisement_contents (shop_id, content, created_at, updated_at)
VALUES (?, ?, ?, ?)
`

type CreateAdvertisementContentParams struct {
	ShopID    int64
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateAdvertisementContent(ctx context.Context, arg CreateAdvertisementContentParams) error {
	_, err := q.db.ExecContext(ctx, createAdvertisementContent,
		arg.ShopID,
		arg.Content,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createReservation = `-- name: CreateReservation :exec
INSERT INTO reservations (shop_id, user_id, reservation_datetime, status)
VALUES (?, ?, ?, ?)
`

type CreateReservationParams struct {
	ShopID              int64
	UserID              int64
	ReservationDatetime time.Time
	Status              string
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) error {
	_, err := q.db.ExecContext(ctx, createReservation,
		arg.ShopID,
		arg.UserID,
		arg.ReservationDatetime,
		arg.Status,
	)
	return err
}

const createShop = `-- name: CreateShop :exec
INSERT INTO shops (name, postal_code, city, street, building, phone_number, business_hours, description, latitude, longitude)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateShopParams struct {
	Name          string
	PostalCode    string
	City          string
	Street        string
	Building      sql.NullString
	PhoneNumber   string
	BusinessHours string
	Description   sql.NullString
	Latitude      string
	Longitude     string
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) error {
	_, err := q.db.ExecContext(ctx, createShop,
		arg.Name,
		arg.PostalCode,
		arg.City,
		arg.Street,
		arg.Building,
		arg.PhoneNumber,
		arg.BusinessHours,
		arg.Description,
		arg.Latitude,
		arg.Longitude,
	)
	return err
}

const createShopOwner = `-- name: CreateShopOwner :exec
INSERT INTO shop_owners (shop_id, name, email, password)
VALUES (?, ?, ?, ?)
`

type CreateShopOwnerParams struct {
	ShopID   int64
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateShopOwner(ctx context.Context, arg CreateShopOwnerParams) error {
	_, err := q.db.ExecContext(ctx, createShopOwner,
		arg.ShopID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (name, email)
VALUES (?, ?)
`

type CreateUserParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name, arg.Email)
	return err
}

const deleteAdvertisementContent = `-- name: DeleteAdvertisementContent :exec
DELETE FROM advertisement_contents WHERE id = ?
`

func (q *Queries) DeleteAdvertisementContent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAdvertisementContent, id)
	return err
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations WHERE id = ?
`

func (q *Queries) DeleteReservation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReservation, id)
	return err
}

const deleteShop = `-- name: DeleteShop :exec
DELETE FROM shops WHERE id = ?
`

func (q *Queries) DeleteShop(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShop, id)
	return err
}

const deleteShopOwner = `-- name: DeleteShopOwner :exec
DELETE FROM shop_owners WHERE id = ?
`

func (q *Queries) DeleteShopOwner(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShopOwner, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getShopOwnerById = `-- name: GetShopOwnerById :one
SELECT id, shop_id, name, email, password FROM shop_owners WHERE id = ?
`

func (q *Queries) GetShopOwnerById(ctx context.Context, id int64) (ShopOwner, error) {
	row := q.db.QueryRowContext(ctx, getShopOwnerById, id)
	var i ShopOwner
	err := row.Scan(
		&i.ID,
		&i.ShopID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const removeFavoriteShop = `-- name: RemoveFavoriteShop :exec
DELETE FROM favorite_shops WHERE user_id = ? AND shop_id = ?
`

type RemoveFavoriteShopParams struct {
	UserID int64
	ShopID int64
}

func (q *Queries) RemoveFavoriteShop(ctx context.Context, arg RemoveFavoriteShopParams) error {
	_, err := q.db.ExecContext(ctx, removeFavoriteShop, arg.UserID, arg.ShopID)
	return err
}

const updateAdvertisementContent = `-- name: UpdateAdvertisementContent :exec
UPDATE advertisement_contents
SET content = ?, updated_at = ?
WHERE id = ?
`

type UpdateAdvertisementContentParams struct {
	Content   string
	UpdatedAt time.Time
	ID        int64
}

func (q *Queries) UpdateAdvertisementContent(ctx context.Context, arg UpdateAdvertisementContentParams) error {
	_, err := q.db.ExecContext(ctx, updateAdvertisementContent, arg.Content, arg.UpdatedAt, arg.ID)
	return err
}

const updateReservation = `-- name: UpdateReservation :exec
UPDATE reservations
SET reservation_datetime = ?, status = ?
WHERE id = ?
`

type UpdateReservationParams struct {
	ReservationDatetime time.Time
	Status              string
	ID                  int64
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) error {
	_, err := q.db.ExecContext(ctx, updateReservation, arg.ReservationDatetime, arg.Status, arg.ID)
	return err
}

const updateShop = `-- name: UpdateShop :exec
UPDATE shops
SET name = ?, postal_code = ?, city = ?, street = ?, building = ?, phone_number = ?, business_hours = ?, description = ?, latitude = ?, longitude = ?
WHERE id = ?
`

type UpdateShopParams struct {
	Name          string
	PostalCode    string
	City          string
	Street        string
	Building      sql.NullString
	PhoneNumber   string
	BusinessHours string
	Description   sql.NullString
	Latitude      string
	Longitude     string
	ID            int64
}

func (q *Queries) UpdateShop(ctx context.Context, arg UpdateShopParams) error {
	_, err := q.db.ExecContext(ctx, updateShop,
		arg.Name,
		arg.PostalCode,
		arg.City,
		arg.Street,
		arg.Building,
		arg.PhoneNumber,
		arg.BusinessHours,
		arg.Description,
		arg.Latitude,
		arg.Longitude,
		arg.ID,
	)
	return err
}

const updateShopOwner = `-- name: UpdateShopOwner :exec
UPDATE shop_owners
SET name = ?, email = ?, password = ?
WHERE id = ?
`

type UpdateShopOwnerParams struct {
	Name     string
	Email    string
	Password string
	ID       int64
}

func (q *Queries) UpdateShopOwner(ctx context.Context, arg UpdateShopOwnerParams) error {
	_, err := q.db.ExecContext(ctx, updateShopOwner,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = ?, email = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Name  string
	Email string
	ID    int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.Email, arg.ID)
	return err
}

const getFavoriteShops = `-- name: getFavoriteShops :many
SELECT user_id, shop_id, id, name, postal_code, city, street, building, phone_number, business_hours, description, latitude, longitude, favorites_count FROM favorite_shops AS f 
INNER JOIN shops as s 
ON f.shop_id = s.id 
WHERE f.user_id = ?
LIMIT 10 OFFSET ?
`

type getFavoriteShopsParams struct {
	UserID int64
	Offset int32
}

type getFavoriteShopsRow struct {
	UserID         int64
	ShopID         int64
	ID             int64
	Name           string
	PostalCode     string
	City           string
	Street         string
	Building       sql.NullString
	PhoneNumber    string
	BusinessHours  string
	Description    sql.NullString
	Latitude       string
	Longitude      string
	FavoritesCount sql.NullInt64
}

func (q *Queries) getFavoriteShops(ctx context.Context, arg getFavoriteShopsParams) ([]getFavoriteShopsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFavoriteShops, arg.UserID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []getFavoriteShopsRow
	for rows.Next() {
		var i getFavoriteShopsRow
		if err := rows.Scan(
			&i.UserID,
			&i.ShopID,
			&i.ID,
			&i.Name,
			&i.PostalCode,
			&i.City,
			&i.Street,
			&i.Building,
			&i.PhoneNumber,
			&i.BusinessHours,
			&i.Description,
			&i.Latitude,
			&i.Longitude,
			&i.FavoritesCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
