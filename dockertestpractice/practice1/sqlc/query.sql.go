// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package mysql

import (
	"context"
)

const getTransaction = `-- name: GetTransaction :one
SELECT id, sender_id, receiver_id, amount, created_at FROM transactions WHERE id = ? limit 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.ReceiverID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const recordTransaction = `-- name: RecordTransaction :exec
INSERT INTO transactions (sender_id, receiver_id, amount)
VALUES (?, ?, ?)
`

type RecordTransactionParams struct {
	SenderID   int32
	ReceiverID int32
	Amount     string
}

func (q *Queries) RecordTransaction(ctx context.Context, arg RecordTransactionParams) error {
	_, err := q.db.ExecContext(ctx, recordTransaction, arg.SenderID, arg.ReceiverID, arg.Amount)
	return err
}

const updateUserBalance = `-- name: UpdateUserBalance :exec
UPDATE users
SET balance = ?
WHERE id = ?
`

type UpdateUserBalanceParams struct {
	Balance string
	ID      int32
}

func (q *Queries) UpdateUserBalance(ctx context.Context, arg UpdateUserBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBalance, arg.Balance, arg.ID)
	return err
}
